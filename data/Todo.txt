1. combiner gives multiple images to the engines
2. adjust easyOCR, tesseract, surya to this (make sure to adjust the combiner) 
3. Try to make surya faster by detecting first then recognizing
4. make sure tesseract and surya can combine their outputs (fallback instead of LLM)
""" 
2- Surya and tesseract can output word level confidence scores which can be very useful in combining them, below is a delimited function that can be used in combining  their outputs which essentially does:
2.1-Align words across engines based on spatial overlap.
2.2-Choose the most confident output for each aligned word.
2.3-Fill in any blind spots (words only one engine saw).
2.3-Robustly handle splits, merges, and spurious detections.
2.4- Use this function ONLY if we are using tesseract and surya, and a flag provided to the terminal indicating to use this functionality , thus helping us reduce the load on the LLM.
""" from scipy.optimize import linear_sum_assignment  # or do greedy matching

def merge_ocr_outputs(tess_out, surya_out, iou_thresh=0.5):
    # 1) Build IoU matrix
    N, M = len(tess_out), len(surya_out)
    iou_mat = [[1 - iou(tess_out[i]['bbox'], surya_out[j]['bbox']) 
                for j in range(M)] for i in range(N)]

    # 2) Solve assignment (minimize 1-IoU → maximize IoU)
    row_idx, col_idx = linear_sum_assignment(iou_mat)

    matched_t = set()
    matched_s = set()
    merged = []

    # 3) Process matches
    for i, j in zip(row_idx, col_idx):
        actual_iou = 1 - iou_mat[i][j]
        if actual_iou >= iou_thresh:
            matched_t.add(i)
            matched_s.add(j)
            a, b = tess_out[i], surya_out[j]
            chosen = a if a['confidence'] >= b['confidence'] else b
            merged.append(chosen)
    
    # 4) Add unmatched ones
    for i, entry in enumerate(tess_out):
        if i not in matched_t:
            merged.append(entry)
    for j, entry in enumerate(surya_out):
        if j not in matched_s:
            merged.append(entry)

    # 5) (Optional) sort by bbox reading order: top→bottom, left→right
    merged.sort(key=lambda e: (e['bbox'][1], e['bbox'][0]))
    return merged
 """
3- write the README file for the program, convering all of its functionalities and do not use jargon """
5. make sure llm batch processing , sends one page at a time
6. Benchmark the OCRs
7. README